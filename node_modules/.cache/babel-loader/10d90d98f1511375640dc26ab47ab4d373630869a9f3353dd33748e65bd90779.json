{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/jufia/OneDrive/Documents/Programmer/mostrans-project/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import{useEffect,useState}from'react';import'./../node_modules/bootstrap/dist/css/bootstrap.min.css';import{Routes,Route,HashRouter}from'react-router-dom';import{ApolloClient,InMemoryCache,ApolloProvider,gql}from'@apollo/client';import Footer from'./components/Footer';import{CharProvider}from'./components/context/charContext';import CharacterLocation from'./components/CharacterLocation';import Header from'./components/Header';import Home from'./components/Home';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const apolloClient=new ApolloClient({uri:'https://rickandmortyapi.com/graphql',cache:new InMemoryCache()});const GET_CHAR_LIST=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query getCharacterLists {\\n    characters(page:1) {\\n      results{\\n        id\\n        name\\n        status\\n        location {\\n          name\\n        }\\n        species\\n        image\\n      }\\n    }\\n  }\\n\"])));function App(){const[data,setData]=useState(null);const client=apolloClient;useEffect(()=>{const fetchData=async()=>{try{const result=await client.query({query:GET_CHAR_LIST});setData(result.data);}catch(err){console.error('Error fetching data:',err);}};fetchData();},[]);return/*#__PURE__*/_jsx(CharProvider,{value:data,children:/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsxs(HashRouter,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/character-location\",element:/*#__PURE__*/_jsx(CharacterLocation,{})})]}),/*#__PURE__*/_jsx(Footer,{})]})})});}export default App;","map":{"version":3,"names":["useEffect","useState","Routes","Route","HashRouter","ApolloClient","InMemoryCache","ApolloProvider","gql","Footer","CharProvider","CharacterLocation","Header","Home","jsx","_jsx","jsxs","_jsxs","apolloClient","uri","cache","GET_CHAR_LIST","_templateObject","_taggedTemplateLiteral","App","data","setData","client","fetchData","result","query","err","console","error","value","children","path","element"],"sources":["C:/Users/jufia/OneDrive/Documents/Programmer/mostrans-project/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport {Routes, Route, HashRouter} from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client'\n\nimport Footer from './components/Footer'\nimport { CharProvider } from './components/context/charContext'\nimport CharacterLocation from './components/CharacterLocation'\nimport Header from './components/Header'\nimport Home from './components/Home'\n\nconst apolloClient = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst GET_CHAR_LIST = gql`\n  query getCharacterLists {\n    characters(page:1) {\n      results{\n        id\n        name\n        status\n        location {\n          name\n        }\n        species\n        image\n      }\n    }\n  }\n`\n\nfunction App() {\n  const [data, setData] = useState(null)\n  const client = apolloClient\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await client.query({\n          query: GET_CHAR_LIST\n        })\n    \n        setData(result.data)\n      } catch (err) {\n        console.error('Error fetching data:', err)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  return (\n    <CharProvider value={data}>\n      <ApolloProvider client={client}>\n        <HashRouter>\n          <Header/>\n          <Routes>\n              <Route path='/' element={<Home/>}/>\n              <Route path='/character-location' element={<CharacterLocation/>}/>\n          </Routes>\n          <Footer/>\n        </HashRouter>\n      </ApolloProvider>\n    </CharProvider>\n\n\n  )\n}\n\nexport default App\n"],"mappings":"uLAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,MAAO,wDAAwD,CAC/D,OAAQC,MAAM,CAAEC,KAAK,CAAEC,UAAU,KAAO,kBAAkB,CAC1D,OAASC,YAAY,CAAEC,aAAa,CAAEC,cAAc,CAAEC,GAAG,KAAQ,gBAAgB,CAEjF,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,OAASC,YAAY,KAAQ,kCAAkC,CAC/D,MAAO,CAAAC,iBAAiB,KAAM,gCAAgC,CAC9D,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,IAAI,KAAM,mBAAmB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpC,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAb,YAAY,CAAC,CACpCc,GAAG,CAAE,qCAAqC,CAC1CC,KAAK,CAAE,GAAI,CAAAd,aAAa,CAAC,CAC3B,CAAC,CAAC,CAEF,KAAM,CAAAe,aAAa,CAAGb,GAAG,CAAAc,eAAA,GAAAA,eAAA,CAAAC,sBAAA,+NAexB,CAED,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAAA0B,MAAM,CAAGT,YAAY,CAE3BlB,SAAS,CAAC,IAAM,CACd,KAAM,CAAA4B,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAF,MAAM,CAACG,KAAK,CAAC,CAChCA,KAAK,CAAET,aACT,CAAC,CAAC,CAEFK,OAAO,CAACG,MAAM,CAACJ,IAAI,CAAC,CACtB,CAAE,MAAOM,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEF,GAAG,CAAC,CAC5C,CACF,CAAC,CAEDH,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEb,IAAA,CAACL,YAAY,EAACwB,KAAK,CAAET,IAAK,CAAAU,QAAA,cACxBpB,IAAA,CAACR,cAAc,EAACoB,MAAM,CAAEA,MAAO,CAAAQ,QAAA,cAC7BlB,KAAA,CAACb,UAAU,EAAA+B,QAAA,eACTpB,IAAA,CAACH,MAAM,GAAC,CAAC,cACTK,KAAA,CAACf,MAAM,EAAAiC,QAAA,eACHpB,IAAA,CAACZ,KAAK,EAACiC,IAAI,CAAC,GAAG,CAACC,OAAO,cAAEtB,IAAA,CAACF,IAAI,GAAC,CAAE,CAAC,CAAC,cACnCE,IAAA,CAACZ,KAAK,EAACiC,IAAI,CAAC,qBAAqB,CAACC,OAAO,cAAEtB,IAAA,CAACJ,iBAAiB,GAAC,CAAE,CAAC,CAAC,EAC9D,CAAC,cACTI,IAAA,CAACN,MAAM,GAAC,CAAC,EACC,CAAC,CACC,CAAC,CACL,CAAC,CAInB,CAEA,cAAe,CAAAe,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}