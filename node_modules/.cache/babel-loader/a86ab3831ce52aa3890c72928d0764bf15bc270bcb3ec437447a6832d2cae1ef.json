{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jufia\\\\OneDrive\\\\Documents\\\\Programmer\\\\mostrans-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Routes, Route, HashRouter } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport Footer from './components/Footer';\nimport { CharProvider } from './components/context/charContext';\nimport CharacterLocation from './components/CharacterLocation';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apolloClient = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});\nconst GET_CHAR_LIST = gql`\n  query getCharacterLists {\n    characters(page:1) {\n      results{\n        id\n        name\n        status\n        location {\n          name\n        }\n        species\n        image\n      }\n    }\n  }\n`;\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n  const client = apolloClient;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await client.query({\n          query: GET_CHAR_LIST\n        });\n        setData(result.data);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CharProvider, {\n    value: data,\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(HashRouter, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/character-location\",\n            element: /*#__PURE__*/_jsxDEV(CharacterLocation, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Routes","Route","HashRouter","ApolloClient","InMemoryCache","ApolloProvider","gql","Footer","CharProvider","CharacterLocation","Header","Home","jsxDEV","_jsxDEV","apolloClient","uri","cache","GET_CHAR_LIST","App","_s","data","setData","client","fetchData","result","query","err","console","error","value","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/jufia/OneDrive/Documents/Programmer/mostrans-project/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport {Routes, Route, HashRouter} from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client'\n\nimport Footer from './components/Footer'\nimport { CharProvider } from './components/context/charContext'\nimport CharacterLocation from './components/CharacterLocation'\nimport Header from './components/Header'\nimport Home from './components/Home'\n\nconst apolloClient = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst GET_CHAR_LIST = gql`\n  query getCharacterLists {\n    characters(page:1) {\n      results{\n        id\n        name\n        status\n        location {\n          name\n        }\n        species\n        image\n      }\n    }\n  }\n`\n\nfunction App() {\n  const [data, setData] = useState(null)\n  const client = apolloClient\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await client.query({\n          query: GET_CHAR_LIST\n        })\n    \n        setData(result.data)\n      } catch (err) {\n        console.error('Error fetching data:', err)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  return (\n    <CharProvider value={data}>\n      <ApolloProvider client={client}>\n        <HashRouter>\n          <Header/>\n          <Routes>\n              <Route path='/' element={<Home/>}/>\n              <Route path='/character-location' element={<CharacterLocation/>}/>\n          </Routes>\n          <Footer/>\n        </HashRouter>\n      </ApolloProvider>\n    </CharProvider>\n\n\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}